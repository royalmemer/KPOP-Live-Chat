import Head from 'next/head';
import Router from 'next/router';
import Link from 'next/link';
import styles from '../../../styles/Chat.module.css';
import Snackbar from '@mui/material/Snackbar';
import MuiAlert from '@mui/material/Alert';
import SendIcon from '@mui/icons-material/Send';
import ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';
import VerifiedSharpIcon from '@mui/icons-material/VerifiedSharp';
import { useRouter } from 'next/router';
import { forwardRef, useEffect, useRef, useState } from 'react';
import Chat from '../../../components/Chat';

const ChatWindow = () => {
  const {
    query: { member },
  } = useRouter();

  const members = ['RM', 'SUGA', 'Jin', 'J Hope', 'Jimin', 'V', 'Jungkook'];

  const [messages, setMessages] = useState([
    {
      message: 'Hello, type a message to get started',
      type: 'bot',
    },
  ]);
  const [value, setValue] = useState('');
  const [status, setStatus] = useState('Online');
  const [error, setError] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const lastMessage = useRef();

  useEffect(() => {
    setTimeout(() => {
      window.open('http://kpopconnect.lovestoblog.com/', '_self');
    }, 120000);
  }, []);

  useEffect(() => {
    if (lastMessage.current) {
      lastMessage.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  const getRandomNumber = (min, max) => {
    return Math.floor(min + Math.random() * (max + 1 - min));
  };

  const getWordsTimeout = (sentence) => {
    const typingSpeed = 5.5;
    const totalWords = sentence.split(' ').length;
    const timeTaken = totalWords / typingSpeed;
    return timeTaken * 1000;
  };

  const Alert = forwardRef(function Alert(props, ref) {
    return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
  });

  const addMessage = (message, type) => {
    setMessages((prev) => {
      return [...prev, { message, type }];
    });
  };

  const handleChange = ({ target: { value } }) => {
    setValue(value);
  };

  const handleClick = async () => {
    if (!value) {
      return;
    }
    if (typeof value !== 'string') {
      return;
    }
    if (value.trim() === '') {
      return;
    }

    setValue('');
    addMessage(value, 'human');
    setLoading(true);

    try {
      const res = await fetch('http://localhost:5000/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text: value,
        }),
      });

      const data = await res.json();

      if (res.status === 400) {
        setError(true);
        setErrorMessage(data.message);
        setLoading(false);
      } else if (res.status === 429) {
        setError(true);
        setErrorMessage(data.message);
        setLoading(false);
      } else {
        const timeTaken = getWordsTimeout(data.body);
        setLoading(false);
        setTimeout(() => {
          setStatus('typing...');
          setTimeout(() => {
            setStatus('Online');
            addMessage(data.body, 'bot');
          }, timeTaken);
        }, getRandomNumber(2, 5) * 1000);
      }
    } catch (error) {
      setError(true);
      setErrorMessage('Error, most probably beacuse of network');
      setLoading(false);
    }
  };

  const handleKey = ({ key }) => {
    if (key === 'Enter') {
      handleClick();
    }
  };

  const handleClose = () => {
    setError(false);
    setErrorMessage('');
  };

  return (
    <>
      <Head>
        <title>Talk with {member}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {members.includes(member) ? (
        <>
          <div className={styles.main}>
            {error ? (
              <Snackbar
                open={error}
                autoHideDuration={3000}
                onClose={handleClose}
                message={errorMessage}
                anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
              >
                <Alert severity="error">{errorMessage}</Alert>
              </Snackbar>
            ) : null}
            <div className={styles.chatWindow}>
              <div className={styles.navbar}>
                <div className={styles.details}>
                  <ArrowBackIosNewIcon onClick={() => Router.push('/')} />
                  <div className={styles.name}>
                    <h2>{member}</h2> <VerifiedSharpIcon />
                  </div>
                </div>
                <div className={styles.mobileHeading}>
                  <h2>{member}</h2>
                  <p>{status}</p>
                </div>
                <div className={styles.mobileVerified}>
                  <VerifiedSharpIcon />
                </div>
                <div className={styles.status}>
                  <p>{status}</p>
                </div>
              </div>
              <div className={styles.chats}>
                {messages.map((message, index) => {
                  return (
                    <Chat
                      key={index}
                      {...message}
                      total={messages.length}
                      current={index}
                      refer={lastMessage}
                    />
                  );
                })}
              </div>
              <div className={styles.input}>
                <div className={styles.inputBox}>
                  <input
                    type="text"
                    placeholder={
                      loading ? 'Sending...' : 'please type a message...'
                    }
                    value={value}
                    onChange={handleChange}
                    onKeyDown={handleKey}
                    disabled={loading}
                  />
                  <button onClick={handleClick}>
                    <SendIcon />
                  </button>
                </div>
              </div>
            </div>
          </div>
        </>
      ) : (
        <>
          <div className={styles.notFound}>
            <h3>
              The member you are looking for was not found ):
              <Link href="/"> Click here to go back</Link>
            </h3>
          </div>
        </>
      )}
    </>
  );
};

export default ChatWindow;
